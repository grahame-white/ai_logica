#!/bin/bash

# script/test: Run test suite for application. Optionally pass in a path to a
#              specific test project or directory to run specific tests.
#              Supports filtering test categories.

set -e

cd "$(dirname "$0")/.."

# Function to show usage
show_usage() {
    echo "Usage: script/test [options] [test-path]"
    echo ""
    echo "Options:"
    echo "  --unit              Run only unit tests (ViewModel business logic)"
    echo "  --component         Run only component tests (Blazor UI rendering)"
    echo "  --integration       Run only integration tests (full application)"
    echo "  --infrastructure    Run only infrastructure tests (E2E setup validation)"
    echo "  --all              Run comprehensive test suite (default - recommended)"
    echo "  --help             Show this help message"
    echo ""
    echo "Examples:"
    echo "  script/test                          # Run comprehensive test suite (22 tests)"
    echo "  script/test --unit                   # Run only unit tests (11 tests)"
    echo "  script/test --component              # Run only component tests (6 tests)"
    echo "  script/test --integration            # Run only integration tests (2 tests)"
    echo "  script/test --infrastructure         # Run only infrastructure tests (3 tests)"
    echo "  script/test AiLogica.Tests          # Run specific test project"
    echo ""
    echo "Test Coverage Summary:"
    echo "  ‚Ä¢ Unit Tests (11): ViewModel business logic and state management"
    echo "  ‚Ä¢ Component Tests (6): Blazor component rendering and UI behavior"
    echo "  ‚Ä¢ Integration Tests (2): Full application startup and HTTP responses"
    echo "  ‚Ä¢ Infrastructure Tests (3): E2E testing strategy and setup validation"
    echo "  ‚Ä¢ Total: 22 tests providing comprehensive E2E workflow validation"
}

# Parse arguments
RUN_UNIT=false
RUN_COMPONENT=false
RUN_INTEGRATION=false
RUN_INFRASTRUCTURE=false
RUN_ALL=false
TEST_PATH=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --unit)
            RUN_UNIT=true
            shift
            ;;
        --component)
            RUN_COMPONENT=true
            shift
            ;;
        --integration)
            RUN_INTEGRATION=true
            shift
            ;;
        --infrastructure)
            RUN_INFRASTRUCTURE=true
            shift
            ;;
        --all)
            RUN_ALL=true
            shift
            ;;
        --help)
            show_usage
            exit 0
            ;;
        *)
            if [[ "$1" =~ ^-- ]]; then
                echo "‚ùå Unknown option: $1"
                echo "Use --help to see available options."
                exit 1
            elif [[ -z "$TEST_PATH" ]]; then
                TEST_PATH="$1"
            else
                echo "‚ùå Multiple test paths specified. Please specify only one."
                exit 1
            fi
            shift
            ;;
    esac
done

echo "==> Running test suite..."

# If a specific test path is provided, run it directly
if [ -n "$TEST_PATH" ]; then
    echo "Running tests for specific path: $TEST_PATH"
    dotnet test "$TEST_PATH"
    exit $?
fi

# If no specific category flags are set, run comprehensive test suite (default)
if [ "$RUN_UNIT" = false ] && [ "$RUN_COMPONENT" = false ] && [ "$RUN_INTEGRATION" = false ] && [ "$RUN_INFRASTRUCTURE" = false ] && [ "$RUN_ALL" = false ]; then
    echo "Running comprehensive test suite (all 22 tests)..."
    dotnet test
    exit $?
fi

# Run tests based on specified categories
EXIT_CODE=0

if [ "$RUN_ALL" = true ]; then
    echo "Running comprehensive test suite (all 22 tests)..."
    dotnet test
    EXIT_CODE=$?
elif [ "$RUN_UNIT" = true ]; then
    echo "Running unit tests (11 tests - ViewModel business logic)..."
    dotnet test --filter "ViewModel"
    EXIT_CODE=$?
elif [ "$RUN_COMPONENT" = true ]; then
    echo "Running component tests (6 tests - Blazor UI rendering)..."
    dotnet test --filter "Component"
    EXIT_CODE=$?
elif [ "$RUN_INTEGRATION" = true ]; then
    echo "Running integration tests (2 tests - full application)..."
    dotnet test --filter "Integration"
    EXIT_CODE=$?
elif [ "$RUN_INFRASTRUCTURE" = true ]; then
    echo "Running infrastructure tests (3 tests - E2E setup validation)..."
    dotnet test --filter "Infrastructure"
    EXIT_CODE=$?
fi

if [ $EXIT_CODE -eq 0 ]; then
    echo "‚úÖ Tests completed successfully"
    echo ""
    echo "üìä Test Coverage Summary:"
    echo "   ‚Ä¢ Business Logic: Validated through unit tests"
    echo "   ‚Ä¢ UI Rendering: Validated through component tests"
    echo "   ‚Ä¢ Full Application: Validated through integration tests"
    echo "   ‚Ä¢ E2E Workflows: Comprehensive coverage across all test layers"
    echo ""
    echo "üöÄ All core functionality tested with fast, reliable execution!"
else
    echo "‚ùå Some tests failed (exit code: $EXIT_CODE)"
    echo "üí° Run individual test categories to isolate issues."
fi

exit $EXIT_CODE