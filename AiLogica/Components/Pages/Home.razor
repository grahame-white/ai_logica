@page "/"
@implements IDisposable
@using AiLogica.ViewModels
@using Microsoft.JSInterop
@inject HomeViewModel ViewModel
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>AI Logica - Logic Gate Simulator</PageTitle>

<div class="canvas-container" @ref="canvasContainer" @onmousemove="OnMouseMove" @onclick="OnCanvasClick" @onmouseleave="OnMouseLeave">
    <!-- Interactive Gate Palette -->
    <div class="interactive-gate-palette">
        <h4>Gate Palette</h4>
        <div class="gate-category">
            <h5>Basic Gates</h5>
            <div class="gate-list">
                <div class="gate-item non-functional">AND</div>
                <div class="gate-item @(ViewModel.SelectedGate == "OR" ? "selected" : "")" @onclick="() => SelectOrGate()" @onclick:stopPropagation="true">
                    @RenderGateContent("OR", ViewModel.SelectedGate == "OR")
                </div>
                <div class="gate-item non-functional">NOT</div>
                <div class="gate-item non-functional">NAND</div>
                <div class="gate-item non-functional">NOR</div>
                <div class="gate-item non-functional">XOR</div>
                <div class="gate-item non-functional">XNOR</div>
                <div class="gate-item non-functional">BUFFER</div>
            </div>
        </div>
    </div>

    @if (ViewModel.PlacedGates.Count == 0 && !ViewModel.IsDragging)
    {
        <div class="canvas-placeholder">
            <h2>@ViewModel.WelcomeMessage</h2>
            <p>Select gates from the floating palette to start designing your logic circuit</p>
            <ul class="instruction-list">
                <li>Select gates from the palette above</li>
                <li>Wire inputs and outputs together</li>
                <li>Use simulation controls to test your design</li>
                <li>Save designs as reusable components</li>
            </ul>
        </div>
    }

    <!-- Placed Gates -->
    @foreach (var gate in ViewModel.PlacedGates)
    {
        <div class="placed-gate" style="left: @(gate.X)px; top: @(gate.Y)px;">
            @RenderGateContent(gate.Type, false, true)
        </div>
    }

    <!-- Dragging Gate (follows mouse) -->
    @if (ViewModel.IsDragging && ViewModel.SelectedGate != null && (ViewModel.MouseX != 0 || ViewModel.MouseY != 0))
    {
        <div class="dragging-gate" style="left: @(ViewModel.MouseX - 30)px; top: @(ViewModel.MouseY - 15)px;">
            @RenderGateContent(ViewModel.SelectedGate, false, true)
        </div>
    }
</div>

@code {
    private ElementReference canvasContainer;

    protected override void OnInitialized()
    {
        ViewModel.PropertyChanged += OnViewModelPropertyChanged;
        base.OnInitialized();
    }

    private RenderFragment RenderGateContent(string gateType, bool showSelectionIndicator = false, bool isPlacedGate = false)
    {
        return gateType switch
        {
            "OR" => @<div style="display: flex; align-items: center; justify-content: center; gap: 0.25rem;">
                @RenderOrGateSvg(isPlacedGate)
                @if (showSelectionIndicator) { <span>✓</span> }
            </div>,
            _ => @<div>@gateType @if (showSelectionIndicator) { <span>✓</span> }</div>
        };
    }

    private RenderFragment RenderOrGateSvg(bool isPlacedGate)
    {
        // Use IEEE standard proportions - taller height for proper OR gate shape
        int width = isPlacedGate ? 48 : 32;
        int height = isPlacedGate ? 36 : 24;
        string strokeWidth = "1";
        
        if (isPlacedGate)
        {
            // Larger placed gate with proper IEEE standard OR gate proportions
            return @<svg width="@width" height="@height" viewBox="0 0 48 36" style="display: block;">
                <!-- OR gate curved back (input side) -->
                <path d="M6 12 Q9 18 6 24" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- OR gate top curve -->
                <path d="M6 12 Q20 8 36 18" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- OR gate bottom curve -->
                <path d="M6 24 Q20 28 36 18" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- Input lines -->
                <line x1="0" y1="15" x2="7" y2="15" stroke="currentColor" stroke-width="@strokeWidth"/>
                <line x1="0" y1="21" x2="7" y2="21" stroke="currentColor" stroke-width="@strokeWidth"/>
                <!-- Output line -->
                <line x1="36" y1="18" x2="42" y2="18" stroke="currentColor" stroke-width="@strokeWidth"/>
            </svg>;
        }
        else
        {
            // Smaller palette gate with proper IEEE standard OR gate proportions
            return @<svg width="@width" height="@height" viewBox="0 0 32 24" style="display: block;">
                <!-- OR gate curved back (input side) -->
                <path d="M4 8 Q6 12 4 16" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- OR gate top curve -->
                <path d="M4 8 Q13 5 24 12" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- OR gate bottom curve -->
                <path d="M4 16 Q13 19 24 12" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- Input lines -->
                <line x1="0" y1="10" x2="4.5" y2="10" stroke="currentColor" stroke-width="@strokeWidth"/>
                <line x1="0" y1="14" x2="4.5" y2="14" stroke="currentColor" stroke-width="@strokeWidth"/>
                <!-- Output line -->
                <line x1="24" y1="12" x2="28" y2="12" stroke="currentColor" stroke-width="@strokeWidth"/>
            </svg>;
        }
    }

    private void OnViewModelPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private async void OnMouseMove(MouseEventArgs e)
    {
        if (ViewModel.IsDragging)
        {
            // Get canvas-relative coordinates by calculating from client coordinates
            var rect = await JSRuntime.InvokeAsync<BoundingClientRect>("getBoundingClientRect", canvasContainer);
            var canvasX = e.ClientX - rect.Left;
            var canvasY = e.ClientY - rect.Top;
            
            ViewModel.UpdateMousePosition(canvasX, canvasY);
            StateHasChanged(); // Force immediate re-render for smoother dragging
        }
    }

    private async void OnCanvasClick(MouseEventArgs e)
    {
        if (ViewModel.IsDragging && ViewModel.SelectedGate != null)
        {
            // Get canvas-relative coordinates for placement
            var rect = await JSRuntime.InvokeAsync<BoundingClientRect>("getBoundingClientRect", canvasContainer);
            var canvasX = e.ClientX - rect.Left;
            var canvasY = e.ClientY - rect.Top;
            
            ViewModel.PlaceGate(canvasX, canvasY);
        }
    }

    private void OnMouseLeave(MouseEventArgs e)
    {
        // Cancel drag if mouse leaves canvas
        if (ViewModel.IsDragging)
        {
            ViewModel.CancelDrag();
        }
    }

    private void SelectOrGate()
    {
        ViewModel.SelectGate("OR");
        StateHasChanged(); // Force immediate re-render
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnViewModelPropertyChanged;
    }

    public class BoundingClientRect
    {
        public double Left { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
    }
}
