@page "/"
@implements IDisposable
@using AiLogica.ViewModels
@using Microsoft.JSInterop
@inject HomeViewModel ViewModel
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>AI Logica - Logic Gate Simulator</PageTitle>

@* Requirements Traceability: This component implements core UI requirements
   FR-1: Graphical gate layout capability
   FR-2: Easy gate selection from palette  
   FR-2.1: Gate Palette highlighting on selection
   FR-2.3: Gate follows mouse cursor
   FR-3.2: Visible Connection Points
   FR-3.10-3.13: Wire visual states and preview
   See TRACEABILITY_MATRIX.md for complete mapping *@

<div class="canvas-container" @ref="canvasContainer" @onmousemove="OnMouseMove" @onclick="OnCanvasClick" @onmouseleave="OnMouseLeave" @onkeydown="OnKeyDown" tabindex="0">
    <!-- Interactive Gate Palette (FR-2: Easy gate selection) -->
    <div class="interactive-gate-palette">
        <h4>Gate Palette</h4>
        <div class="gate-category">
            <h5>Basic Gates</h5>
            <div class="gate-list">
                <div class="gate-item non-functional">
                    @RenderGateContent("AND", false)
                </div>
                @* FR-2.1: Gate highlighting on selection via CSS class *@
                <div class="gate-item @(ViewModel.SelectedGate == "OR" ? "selected" : "")" data-gate-type="OR" @onclick="() => SelectOrGate()" @onclick:stopPropagation="true">
                    @RenderGateContent("OR", ViewModel.SelectedGate == "OR")
                </div>
                <div class="gate-item non-functional">
                    @RenderGateContent("NOT", false)
                </div>
                <div class="gate-item non-functional">
                    @RenderGateContent("NAND", false)
                </div>
                <div class="gate-item non-functional">
                    @RenderGateContent("NOR", false)
                </div>
                <div class="gate-item non-functional">
                    @RenderGateContent("XOR", false)
                </div>
                <div class="gate-item non-functional">
                    @RenderGateContent("XNOR", false)
                </div>
                <div class="gate-item non-functional">
                    @RenderGateContent("BUFFER", false)
                </div>
            </div>
        </div>
    </div>

    @if (ViewModel.PlacedGates.Count == 0 && !ViewModel.IsDragging)
    {
        <div class="canvas-placeholder">
            <h2>@ViewModel.WelcomeMessage</h2>
            <p>Select gates from the floating palette to start designing your logic circuit</p>
            <ul class="instruction-list">
                <li>Select gates from the palette above</li>
                <li>Wire inputs and outputs together</li>
                <li>Use simulation controls to test your design</li>
                <li>Save designs as reusable components</li>
            </ul>
        </div>
    }

    <!-- Placed Gates (FR-1: Graphical gate layout) -->
    @foreach (var gate in ViewModel.PlacedGates)
    {
        <div class="placed-gate" style="left: @(gate.X)px; top: @(gate.Y)px;">
            @RenderGateContent(gate.Type, false, true)
            
            @* FR-3.2: Visible Connection Points for gate wiring *@
            <!-- Connection Points -->
            @foreach (var connection in gate.Connections)
            {
                <div class="connection-point @(connection.Type.ToString().ToLower())" 
                     style="left: @(connection.X - gate.X - 4)px; top: @(connection.Y - gate.Y - 4)px;"
                     @onclick="() => OnConnectionClick(connection)"
                     @onclick:stopPropagation="true">
                </div>
            }
        </div>
    }

    @* FR-3.10, FR-3.11, FR-3.12: Wire visual states - connected (blue) vs disconnected (red) *@
    <!-- Wires -->
    @if (ViewModel.Wires.Count > 0)
    {
        <svg class="wire-overlay" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: 5;">
            @foreach (var wire in ViewModel.Wires)
            {
                @foreach (var segment in wire.Segments)
                {
                    <line x1="@segment.StartX" y1="@segment.StartY" 
                          x2="@segment.EndX" y2="@segment.EndY"
                          stroke="@(wire.IsConnected ? "#5eb3f5" : "#f44336")" 
                          stroke-width="2"/>
                }
            }
        </svg>
    }

    @* FR-3.13: Active wiring preview line from source to mouse cursor *@
    <!-- Active wiring preview -->
    @if (ViewModel.IsWiring && ViewModel.ActiveConnection != null)
    {
        <svg class="wire-overlay" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: 6;">
            <line x1="@ViewModel.ActiveConnection.X" y1="@ViewModel.ActiveConnection.Y" 
                  x2="@ViewModel.MouseX" y2="@ViewModel.MouseY"
                  stroke="#6e7681" 
                  stroke-width="2" 
                  stroke-dasharray="5,5"/>
        </svg>
    }

    @* FR-2.3: Dragging gate follows mouse cursor for visual placement feedback *@
    <!-- Dragging Gate (follows mouse) -->
    @if (ViewModel.IsDragging && ViewModel.SelectedGate != null && (ViewModel.MouseX != 0 || ViewModel.MouseY != 0))
    {
        <div class="dragging-gate" style="left: @(ViewModel.MouseX - 48)px; top: @(ViewModel.MouseY - 36)px;">
            @RenderGateContent(ViewModel.SelectedGate, false, true)
        </div>
    }
</div>

@code {
    private ElementReference canvasContainer;

    protected override void OnInitialized()
    {
        ViewModel.PropertyChanged += OnViewModelPropertyChanged;
        base.OnInitialized();
    }

    private RenderFragment RenderGateContent(string gateType, bool showSelectionIndicator = false, bool isPlacedGate = false)
    {
        return gateType switch
        {
            "OR" => @<div class="gate-content">
                @RenderOrGateSvg(isPlacedGate)
                @if (showSelectionIndicator) { <span>✓</span> }
            </div>,
            _ => @<div class="gate-content">
                <span>@gateType</span>
                @if (showSelectionIndicator) { <span>✓</span> }
            </div>
        };
    }

    private RenderFragment RenderOrGateSvg(bool isPlacedGate)
    {
        // FR-2.6, FR-2.7, FR-2.10: IEEE standard proportions - width:height ratio of 4:3 for proper OR gate shape
        // FR-3.1: Placed gates are now 100% larger (96x72) to make wiring less fiddly
        int width = isPlacedGate ? 96 : 32;
        int height = isPlacedGate ? 72 : 24;
        string strokeWidth = "1"; // FR-2.13: 1 pixel line width
        
        if (isPlacedGate)
        {
            // FR-2.6: IEEE standard OR gate geometry for larger placed gates
            return @<svg width="@width" height="@height" viewBox="0 0 96 72" style="display: block;">
                <!-- OR gate curved back (input side) - more pronounced curve -->
                <path d="M16 20 Q24 36 16 52" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- OR gate top curve - smooth arc to output point -->
                <path d="M16 20 Q48 12 76 36" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- OR gate bottom curve - smooth arc to output point -->
                <path d="M16 52 Q48 60 76 36" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- FR-2.11: Input lines positioned to connect with curved back -->
                <line x1="4" y1="28" x2="18" y2="28" stroke="currentColor" stroke-width="@strokeWidth"/>
                <line x1="4" y1="44" x2="18" y2="44" stroke="currentColor" stroke-width="@strokeWidth"/>
                <!-- Output line -->
                <line x1="76" y1="36" x2="88" y2="36" stroke="currentColor" stroke-width="@strokeWidth"/>
            </svg>;
        }
        else
        {
            // FR-2.6: IEEE standard OR gate geometry for smaller palette gates
            return @<svg width="@width" height="@height" viewBox="0 0 32 24" style="display: block;">
                <!-- OR gate curved back (input side) - more pronounced curve -->
                <path d="M5 7 Q8 12 5 17" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- OR gate top curve - smooth arc to output point -->
                <path d="M5 7 Q16 4 25 12" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- OR gate bottom curve - smooth arc to output point -->
                <path d="M5 17 Q16 20 25 12" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- Input lines positioned to connect with curved back -->
                <line x1="1" y1="9" x2="6" y2="9" stroke="currentColor" stroke-width="@strokeWidth"/>
                <line x1="1" y1="15" x2="6" y2="15" stroke="currentColor" stroke-width="@strokeWidth"/>
                <!-- Output line -->
                <line x1="25" y1="12" x2="29" y2="12" stroke="currentColor" stroke-width="@strokeWidth"/>
            </svg>;
        }
    }

    private void OnViewModelPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private async void OnMouseMove(MouseEventArgs e)
    {
        if (ViewModel.IsDragging || ViewModel.IsWiring)
        {
            // Get canvas-relative coordinates by calculating from client coordinates
            var rect = await JSRuntime.InvokeAsync<BoundingClientRect>("getBoundingClientRect", canvasContainer);
            var canvasX = e.ClientX - rect.Left;
            var canvasY = e.ClientY - rect.Top;
            
            ViewModel.UpdateMousePosition(canvasX, canvasY);
            StateHasChanged(); // Force immediate re-render for smoother dragging/wiring
        }
    }

    private async void OnCanvasClick(MouseEventArgs e)
    {
        // FR-2.4: Gate Placement by clicking on canvas
        if (ViewModel.IsDragging && ViewModel.SelectedGate != null)
        {
            // Get canvas-relative coordinates for placement
            var rect = await JSRuntime.InvokeAsync<BoundingClientRect>("getBoundingClientRect", canvasContainer);
            var canvasX = e.ClientX - rect.Left;
            var canvasY = e.ClientY - rect.Top;
            
            ViewModel.PlaceGate(canvasX, canvasY);
        }
        // FR-3.14: Cancel wiring if clicking on empty space
        else if (ViewModel.IsWiring)
        {
            // Cancel wiring if clicking on empty space
            ViewModel.CancelWiring();
        }
    }

    private void OnMouseLeave(MouseEventArgs e)
    {
        // Cancel drag or wiring if mouse leaves canvas
        if (ViewModel.IsDragging)
        {
            ViewModel.CancelDrag();
        }
        else if (ViewModel.IsWiring)
        {
            ViewModel.CancelWiring();
        }
    }

    private void OnConnectionClick(Connection connection)
    {
        if (ViewModel.IsWiring && ViewModel.ActiveConnection != null)
        {
            // Complete wiring to this connection
            ViewModel.CompleteWiring(connection);
        }
        else
        {
            // Start wiring from this connection
            ViewModel.StartWiring(connection);
        }
        StateHasChanged();
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        // FR-3.14: Cancel wiring operation with Escape key
        if (e.Key == "Escape")
        {
            if (ViewModel.IsWiring)
            {
                ViewModel.CancelWiring();
                StateHasChanged();
            }
            else if (ViewModel.IsDragging)
            {
                ViewModel.CancelDrag();
                StateHasChanged();
            }
        }
    }

    private void SelectOrGate()
    {
        ViewModel.SelectGate("OR");
        StateHasChanged(); // Force immediate re-render
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnViewModelPropertyChanged;
    }

    public class BoundingClientRect
    {
        public double Left { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
    }
}
