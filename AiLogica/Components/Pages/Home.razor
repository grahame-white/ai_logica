@page "/"
@implements IDisposable
@using AiLogica.ViewModels
@inject HomeViewModel ViewModel
@rendermode InteractiveServer

<PageTitle>AI Logica - Logic Gate Simulator</PageTitle>

<div class="canvas-container" @onmousemove="OnMouseMove" @onclick="OnCanvasClick" @onmouseleave="OnMouseLeave">
    <!-- Interactive Gate Palette -->
    <div class="interactive-gate-palette">
        <h4>Gate Palette</h4>
        <div class="gate-category">
            <h5>Basic Gates</h5>
            <div class="gate-list">
                <div class="gate-item">AND</div>
                <div class="gate-item @(ViewModel.SelectedGate == "OR" ? "selected" : "")" @onclick="() => SelectOrGate()">
                    OR @(ViewModel.SelectedGate == "OR" ? "✓" : "")
                </div>
                <div class="gate-item">NOT</div>
                <div class="gate-item">NAND</div>
                <div class="gate-item">NOR</div>
                <div class="gate-item">XOR</div>
                <div class="gate-item">XNOR</div>
                <div class="gate-item">BUFFER</div>
            </div>
        </div>
    </div>

    @if (ViewModel.PlacedGates.Count == 0 && !ViewModel.IsDragging)
    {
        <div class="canvas-placeholder">
            <h2>@ViewModel.WelcomeMessage</h2>
            <p>Select gates from the floating palette to start designing your logic circuit</p>
            <ul class="instruction-list">
                <li>Select gates from the palette above</li>
                <li>Wire inputs and outputs together</li>
                <li>Use simulation controls to test your design</li>
                <li>Save designs as reusable components</li>
            </ul>
        </div>
    }

    <!-- Placed Gates -->
    @foreach (var gate in ViewModel.PlacedGates)
    {
        <div class="placed-gate" style="left: @(gate.X)px; top: @(gate.Y)px;">
            @gate.Type
        </div>
    }

    <!-- Dragging Gate (follows mouse) -->
    @if (ViewModel.IsDragging && ViewModel.SelectedGate != null)
    {
        <div class="dragging-gate" style="left: @(ViewModel.MouseX - 30)px; top: @(ViewModel.MouseY - 15)px;">
            @ViewModel.SelectedGate
        </div>
    }
</div>

@code {
    protected override void OnInitialized()
    {
        ViewModel.PropertyChanged += OnViewModelPropertyChanged;
        base.OnInitialized();
    }

    private void OnViewModelPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        if (ViewModel.IsDragging)
        {
            ViewModel.UpdateMousePosition(e.OffsetX, e.OffsetY);
        }
    }

    private void OnCanvasClick(MouseEventArgs e)
    {
        if (ViewModel.IsDragging && ViewModel.SelectedGate != null)
        {
            ViewModel.PlaceGate(e.OffsetX, e.OffsetY);
        }
    }

    private void OnMouseLeave(MouseEventArgs e)
    {
        // Cancel drag if mouse leaves canvas
        if (ViewModel.IsDragging)
        {
            ViewModel.CancelDrag();
        }
    }

    private void SelectOrGate()
    {
        ViewModel.SelectGate("OR");
        StateHasChanged(); // Force immediate re-render
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnViewModelPropertyChanged;
    }
}
