@page "/"
@implements IDisposable
@using AiLogica.ViewModels
@using Microsoft.JSInterop
@inject HomeViewModel ViewModel
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>AI Logica - Logic Gate Simulator</PageTitle>

<div class="canvas-container" @ref="canvasContainer" @onmousemove="OnMouseMove" @onclick="OnCanvasClick" @onmouseleave="OnMouseLeave">
    <!-- Interactive Gate Palette -->
    <div class="interactive-gate-palette">
        <h4>Gate Palette</h4>
        <div class="gate-category">
            <h5>Basic Gates</h5>
            <div class="gate-list">
                <div class="gate-item non-functional">
                    @RenderGateContent("AND", false)
                </div>
                <div class="gate-item @(ViewModel.SelectedGate == "OR" ? "selected" : "")" data-gate-type="OR" @onclick="() => SelectOrGate()" @onclick:stopPropagation="true">
                    @RenderGateContent("OR", ViewModel.SelectedGate == "OR")
                </div>
                <div class="gate-item non-functional">
                    @RenderGateContent("NOT", false)
                </div>
                <div class="gate-item non-functional">
                    @RenderGateContent("NAND", false)
                </div>
                <div class="gate-item non-functional">
                    @RenderGateContent("NOR", false)
                </div>
                <div class="gate-item non-functional">
                    @RenderGateContent("XOR", false)
                </div>
                <div class="gate-item non-functional">
                    @RenderGateContent("XNOR", false)
                </div>
                <div class="gate-item non-functional">
                    @RenderGateContent("BUFFER", false)
                </div>
            </div>
        </div>
    </div>

    @if (ViewModel.PlacedGates.Count == 0 && !ViewModel.IsDragging)
    {
        <div class="canvas-placeholder">
            <h2>@ViewModel.WelcomeMessage</h2>
            <p>Select gates from the floating palette to start designing your logic circuit</p>
            <ul class="instruction-list">
                <li>Select gates from the palette above</li>
                <li>Wire inputs and outputs together</li>
                <li>Use simulation controls to test your design</li>
                <li>Save designs as reusable components</li>
            </ul>
        </div>
    }

    <!-- Placed Gates -->
    @foreach (var gate in ViewModel.PlacedGates)
    {
        <div class="placed-gate" style="left: @(gate.X)px; top: @(gate.Y)px;">
            @RenderGateContent(gate.Type, false, true)
        </div>
    }

    <!-- Connection Points -->
    @foreach (var gate in ViewModel.PlacedGates)
    {
        @foreach (var connection in gate.GetConnectionPoints())
        {
            var isConnected = ViewModel.Wires.Any(w => w.StartConnectionId == connection.Id || w.EndConnectionId == connection.Id);
            <div class="connection-point @(connection.Type == AiLogica.ViewModels.ConnectionType.Input ? "input" : "output") @(isConnected ? "connected" : "disconnected")"
                 style="left: @(connection.X - 4)px; top: @(connection.Y - 4)px;"
                 @onclick="() => HandleConnectionClick(connection.Id)"
                 @onclick:stopPropagation="true">
                @if (!isConnected)
                {
                    <span class="disconnected-marker">×</span>
                }
            </div>
        }
    }

    <!-- Wires -->
    @foreach (var wire in ViewModel.Wires)
    {
        @if (wire.Path.Count > 1)
        {
            <svg class="wire-svg" style="position: absolute; left: 0; top: 0; pointer-events: none; z-index: 1;">
                <polyline points="@string.Join(" ", wire.Path.Select(p => $"{p.X},{p.Y}"))"
                          stroke="#007acc" stroke-width="2" fill="none" />
            </svg>
        }
    }

    <!-- Dragging Gate (follows mouse) -->
    @if (ViewModel.IsDragging && ViewModel.SelectedGate != null && (ViewModel.MouseX != 0 || ViewModel.MouseY != 0))
    {
        <div class="dragging-gate" style="left: @(ViewModel.MouseX - 30)px; top: @(ViewModel.MouseY - 15)px;">
            @RenderGateContent(ViewModel.SelectedGate, false, true)
        </div>
    }
</div>

@code {
    private ElementReference canvasContainer;

    protected override void OnInitialized()
    {
        ViewModel.PropertyChanged += OnViewModelPropertyChanged;
        base.OnInitialized();
    }

    private RenderFragment RenderGateContent(string gateType, bool showSelectionIndicator = false, bool isPlacedGate = false)
    {
        return gateType switch
        {
            "OR" => @<div class="gate-content">
                @RenderOrGateSvg(isPlacedGate)
                @if (showSelectionIndicator) { <span>✓</span> }
            </div>,
            _ => @<div class="gate-content">
                <span>@gateType</span>
                @if (showSelectionIndicator) { <span>✓</span> }
            </div>
        };
    }

    private RenderFragment RenderOrGateSvg(bool isPlacedGate)
    {
        // Use IEEE standard proportions - width:height ratio of 4:3 for proper OR gate shape
        int width = isPlacedGate ? 48 : 32;
        int height = isPlacedGate ? 36 : 24;
        string strokeWidth = "1";
        
        if (isPlacedGate)
        {
            // Larger placed gate with IEEE standard OR gate geometry
            return @<svg width="@width" height="@height" viewBox="0 0 48 36" style="display: block;">
                <!-- OR gate curved back (input side) - more pronounced curve -->
                <path d="M8 10 Q12 18 8 26" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- OR gate top curve - smooth arc to output point -->
                <path d="M8 10 Q24 6 38 18" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- OR gate bottom curve - smooth arc to output point -->
                <path d="M8 26 Q24 30 38 18" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- Input lines positioned to connect with curved back -->
                <line x1="2" y1="14" x2="9" y2="14" stroke="currentColor" stroke-width="@strokeWidth"/>
                <line x1="2" y1="22" x2="9" y2="22" stroke="currentColor" stroke-width="@strokeWidth"/>
                <!-- Output line -->
                <line x1="38" y1="18" x2="44" y2="18" stroke="currentColor" stroke-width="@strokeWidth"/>
            </svg>;
        }
        else
        {
            // Smaller palette gate with IEEE standard OR gate geometry
            return @<svg width="@width" height="@height" viewBox="0 0 32 24" style="display: block;">
                <!-- OR gate curved back (input side) - more pronounced curve -->
                <path d="M5 7 Q8 12 5 17" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- OR gate top curve - smooth arc to output point -->
                <path d="M5 7 Q16 4 25 12" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- OR gate bottom curve - smooth arc to output point -->
                <path d="M5 17 Q16 20 25 12" 
                      stroke="currentColor" 
                      fill="none" 
                      stroke-width="@strokeWidth"/>
                <!-- Input lines positioned to connect with curved back -->
                <line x1="1" y1="9" x2="6" y2="9" stroke="currentColor" stroke-width="@strokeWidth"/>
                <line x1="1" y1="15" x2="6" y2="15" stroke="currentColor" stroke-width="@strokeWidth"/>
                <!-- Output line -->
                <line x1="25" y1="12" x2="29" y2="12" stroke="currentColor" stroke-width="@strokeWidth"/>
            </svg>;
        }
    }

    private void OnViewModelPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private async void OnMouseMove(MouseEventArgs e)
    {
        if (ViewModel.IsDragging)
        {
            // Get canvas-relative coordinates by calculating from client coordinates
            var rect = await JSRuntime.InvokeAsync<BoundingClientRect>("getBoundingClientRect", canvasContainer);
            var canvasX = e.ClientX - rect.Left;
            var canvasY = e.ClientY - rect.Top;
            
            ViewModel.UpdateMousePosition(canvasX, canvasY);
            StateHasChanged(); // Force immediate re-render for smoother dragging
        }
    }

    private async void OnCanvasClick(MouseEventArgs e)
    {
        if (ViewModel.IsDragging && ViewModel.SelectedGate != null)
        {
            // Get canvas-relative coordinates for placement
            var rect = await JSRuntime.InvokeAsync<BoundingClientRect>("getBoundingClientRect", canvasContainer);
            var canvasX = e.ClientX - rect.Left;
            var canvasY = e.ClientY - rect.Top;
            
            ViewModel.PlaceGate(canvasX, canvasY);
        }
    }

    private void OnMouseLeave(MouseEventArgs e)
    {
        // Cancel drag if mouse leaves canvas
        if (ViewModel.IsDragging)
        {
            ViewModel.CancelDrag();
        }
    }

    private void SelectOrGate()
    {
        ViewModel.SelectGate("OR");
        StateHasChanged(); // Force immediate re-render
    }

    private void HandleConnectionClick(Guid connectionId)
    {
        if (ViewModel.IsWiring)
        {
            ViewModel.CompleteWiring(connectionId);
        }
        else
        {
            ViewModel.StartWiring(connectionId);
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnViewModelPropertyChanged;
    }

    public class BoundingClientRect
    {
        public double Left { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
    }
}
